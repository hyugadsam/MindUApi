# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

pool:
  vmImage: 'vs2017-win2016'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  proyecto: '**/MindUWebApi.csproj'

steps:
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:SkipInvalidConfigurations=true /p:PublishUrl="$(build.artifactStagingDirectory)/publish" '
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

- task: UseDotNet@2
  displayName: 'Instalando ASP.NET Core 3.1'
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
    includePreviewVersions: false

# - script: dotnet build $(solution) --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build 2
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need

  
- task: DotNetCoreCLI@2
  displayName: 'Publishing App...'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: $(proyecto)
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) --runtime win-x64 --self-contained'
    zipAfterPublish: false
    modifyOutputPath: false
    
- task: PublishBuildArtifacts@1
  displayName: 'Publicando los artefactos'